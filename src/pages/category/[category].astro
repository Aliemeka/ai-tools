---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ToolGrid from "../../components/ToolGrid.astro";
import SearchBar from "../../components/SearchBar.astro";
import FilterSidebar from "../../components/FilterSidebar.astro";
import { getCollection } from "astro:content";

export const prerender = false;

const sortBy = Astro.url.searchParams.get("sort") || "ratings";
const allTools = await getCollection("tools");
const { category } = Astro.params;
const allCategories = [...new Set(allTools.map((tool) => tool.data.category))];
if (allCategories.findIndex((c) => c === category) < 0 || !category) {
  return Astro.redirect("/404");
}
const tools = allTools.filter((tool) => tool.data.category === category);
const categories = [
  {
    name: "Chat Tools",
    slug: "chat",
    count: allTools.filter((t) => t.data.category === "chat").length,
  },
  {
    name: "Code Assistants",
    slug: "code-assistant",
    count: allTools.filter((t) => t.data.category === "code-assistant").length,
  },
  {
    name: "Image Generation",
    slug: "image-generation",
    count: allTools.filter((t) => t.data.category === "image-generation")
      .length,
  },
  {
    name: "Agent Builders",
    slug: "agent-builder",
    count: allTools.filter((t) => t.data.category === "agent-builder").length,
  },
  {
    name: "Writing Tools",
    slug: "writing",
    count: allTools.filter((t) => t.data.category === "writing").length,
  },
  {
    name: "Voice & Audio",
    slug: "voice",
    count: allTools.filter((t) => t.data.category === "voice").length,
  },
  {
    name: "Video Tools",
    slug: "video",
    count: allTools.filter((t) => t.data.category === "video").length,
  },
  {
    name: "Analytics",
    slug: "analytics",
    count: allTools.filter((t) => t.data.category === "analytics").length,
  },
  {
    name: "Development",
    slug: "development",
    count: allTools.filter((t) => t.data.category === "development").length,
  },
].filter((cat) => cat.count > 0);

const categoryName =
  categories.find((cat) => cat.slug === category)?.name || category;
---

<BaseLayout title={`${categoryName} - AI Tools Directory`}>
  <div class='bg-slate-50 py-12'>
    <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
      <div class='text-center mb-12'>
        <h1 class='text-4xl lg:text-6xl font-bold text-slate-900 mb-4'>{categoryName}</h1>
        <p class='text-xl text-slate-600'>
          Browse {tools.length} tools in the {categoryName.toLowerCase()} category
        </p>
      </div>

      <div class='max-w-2xl mx-auto mb-12'>
        <SearchBar placeholder={`Search ${categoryName.toLowerCase()}...`} />
      </div>
    </div>
  </div>

  <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12'>
    <div class='grid grid-cols-1 lg:grid-cols-4 gap-10'>
      <FilterSidebar
        categories={categories}
        activeCategory={category}
        toggleButtonText="Categories"
      />

      <div class='lg:col-span-3'>
        <div class='flex justify-between items-center mb-8'>
          <p class='text-slate-600 font-medium'>Showing {tools.length} tools</p>
          <select
            id='sort-select'
            class='border border-slate-300 rounded-lg px-4 py-2.5 text-sm bg-white shadow-sm hover:border-fuchsia-300 focus:border-fuchsia-500 focus:ring-2 focus:ring-fuchsia-200 transition-colors'
          >
            <option value='rating' selected={sortBy === "rating"}
              >Sort by Rating</option
            >
            <option value='name' selected={sortBy === "name"}
              >Sort by Name</option
            >
          </select>
        </div>

        <ToolGrid tools={tools} />
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Sort functionality
    const sortSelect = document.getElementById(
      "sort-select"
    ) as HTMLSelectElement;

    if (sortSelect) {
      sortSelect.addEventListener("change", () => {
        const sortValue = sortSelect.value;
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);

        if (sortValue === "rating") {
          params.delete("sort");
        } else {
          params.set("sort", sortValue);
        }

        const newUrl =
          url.pathname + (params.toString() ? "?" + params.toString() : "");
        window.location.href = newUrl;
      });
    }

    // Sort functionality is handled in FilterSidebar component
  });
</script>
